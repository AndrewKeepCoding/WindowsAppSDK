// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

#include <TerminalVelocityFeatures-ApplicationData.h>

namespace Microsoft.Windows.Storage
{
    [feature(Feature_ApplicationData)]
    [contractversion(1)]
    apicontract ApplicationDataContract{};

    /// Specifies the type of data store.
    /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatalocality
    [feature(Feature_ApplicationData)]
    [contract(ApplicationDataContract, 1)]
    enum ApplicationDataLocality
    {
        // NOTE: Values 0-99 match Windows.Storage.ApplicationDataLocality.
        //       Values 1000+ are unique to us here.
        Local = 0,
        LocalCache = 3,
        Roaming = 1,
        SharedLocal = 4,
        Temporary = 2,
        Machine = 1000,
    };

    /// Specifies options for creating application data containers or returning existing containers.
    [feature(Feature_ApplicationData)]
    [contract(ApplicationDataContract, 1)]
    enum ApplicationDataCreateDisposition
    {
        /// Always returns the specified container. Creates the container if it does not exist.
        Always = 0,

        // Returns the specified container only if it already exists. Raises an exception of type System.Exception if the specified container does not exist.
        Existing,
    };

    /// Represents a container for settings. The methods and properties of this class support creating, deleting, enumerating, and traversing the container hierarchy.
    /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer
    [feature(Feature_ApplicationData)]
    [contract(ApplicationDataContract, 1)]
    runtimeclass ApplicationDataContainer : Windows.Foundation.IClosable
    {
        /// Return the child settings containers of the settings container.
        /// https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.containers
        IMap<String, ApplicationDataContainer> Containers { get; };

        /// Return the name of the current settings container.
        /// https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.name
        String Name { get; };

        /// Return the type of the app data store that is associated with the settings container.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.locality
        ApplicationDataLocality Locality { get; };

        /// Return an object that represents the settings in the settings container.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.values
        Windows.Foundation.Collections.IPropertySet Values { get; };

        /// Create or open the specified settings container in the settings container.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.createcontainer
        ApplicationDataContainer CreateContainer(String name, ApplicationDataCreateDisposition disposition);

        /// Delete the specified settings container, its subcontainers, and all settings in the hierarchy.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdatacontainer.deletecontainer
        void DeleteContainer(String name);
    };

    /// Provides access to the application data store.
    /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata
    [feature(Feature_ApplicationData)]
    [contract(ApplicationDataContract, 1)]
    runtimeclass ApplicationData : Windows.Foundation.IClosable
    {
        /// Get an instance of ApplicationData for the current user.
        /// @note Requires the current process has package identity.
        /// @note This is equivalent to Windows.Storage.ApplicationData.Current if running in an AppContainer.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.CreateForPackageFamily(GetCurrentPackageFamilyName()) if not running in an AppContainer.
        static ApplicationData GetDefault();

        /// Get an instance of ApplicationData for the specified user.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.GetForUserAsync()
        /// @note GetForUserAsync(null) is equivalent to GetDefault()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.getforuserasync
        static ApplicationData GetForUser(Windows.System.User user);

        /// Get an instance of ApplicationData for the specified package family for the current user.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.CreateForPackageFamily()
        /// @see https://learn.microsoft.com/uwp/api/windows.management.core.applicationdatamanager.createforpackagefamily
        static ApplicationData GetForPackageFamily(String packageFamilyName);

        /// Get an instance of ApplicationData for the specified unpackaged app for the current user.
        static ApplicationData GetForUnpackaged(String publisher, String name);

        /// Return true if the package family supports the machine data store.
        Boolean IsMachinePathSupported();

        /// Return the path for the local cache data store not included in backup and restore operations.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.LocalCacheFolder().Path()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.localcachefolder
        String LocalCachePath { get; };

        /// Return the path for the local data store. This location is backed up to the cloud.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.LocalFolder().Path()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.localfolder
        String LocalPath { get; };

        /// Return the path for the machine data store.
        /// @note This location is per-machine (not per-user like other *Path properties).
        String MachinePath { get; };

        /// Return the path for the roaming data store.
        /// @warning Roaming data and settings are no longer supported after Windows 10 version 1901 (aka 19H1 aka 10.0.18363.0).
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.RoamingFolder().Path()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.roamingfolder
        String RoamingPath { get; };

        /// Return the path for the shared data store.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.SharedLocalFolder().Path()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.sharedlocalfolder
        String SharedLocalPath { get; };

        /// Return the path for the temporary data store.
        /// @note This is equivalent to Windows.Storage.ApplicationDataManager.TemporaryFolder().Path()
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.temporaryfolder
        String TemporaryPath { get; };

        /// Return a StorageFolder for the local cache data store not included in backup and restore operations.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.localcachefolder
        Windows.Storage.StorageFolder LocalCacheFolder { get; };

        /// Return a StorageFolder for the local data store. This location is backed up to the cloud.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.localfolder
        Windows.Storage.StorageFolder LocalFolder { get; };

        /// Return a StorageFolder for the machine data store.
        /// @note This location is per-machine (not per-user like other *Folder properties).
        Windows.Storage.StorageFolder MachineFolder { get; };

        /// Return a StorageFolder for the roaming data store.
        /// @warning Roaming data and settings are no longer supported after Windows 10 version 1901 (aka 19H1 aka 10.0.18363.0).
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.roamingfolder
        Windows.Storage.StorageFolder RoamingFolder { get; };

        /// Return a StorageFolder for the shared data store.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.sharedlocalfolder
        Windows.Storage.StorageFolder SharedLocalFolder { get; };

        /// Return a StorageFolder for the temporary data store.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.temporaryfolder
        Windows.Storage.StorageFolder TemporaryFolder { get; };

        /// Return the settings container in the local data store.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.localsettings
        ApplicationDataContainer LocalSettings { get; };

        /// Return the settings container in the roaming data store.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.roamingsettings
        ApplicationDataContainer RoamingSettings { get; };

        /// Remove all data from the specified data store.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.clearasync
        Windows.Foundation.IAsyncAction ClearAsync(ApplicationDataLocality locality);

        /// Remove all data from the shared data store in the specified subfolder.
        /// @see SharedLocalPath
        /// @see SharedLocalFolder
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.clearpublishercachefolderasync
        Windows.Foundation.IAsyncAction ClearPublisherCacheFolderAsync(String folderName);

        /// Return the path for the shared data store for the publisher of the app.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.getpublishercachefolder
        String GetPublisherCachePath(String folderName);

        /// Return a StorageFolder for the shared data store for the publisher of the app.
        /// @see https://learn.microsoft.com/uwp/api/windows.storage.applicationdata.getpublishercachefolder
        Windows.Storage.StorageFolder GetPublisherCacheFolder(String folderName);
    }
}
