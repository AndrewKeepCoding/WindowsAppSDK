// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

//import "windows.foundation.idl";
//import "Windows.Management.Deployment.idl";
//import "Microsoft.Windows.ApplicationModel.winmd;"

//import "Windows.ApplicationModel.idl";
import "M.AM.DynamicDependency.idl";
//import "Microsoft.Windows.ApplicationModel.DynamicDependency.winmd";

//import "Windows.Management.Deployment.idl";

namespace Microsoft.Windows.Management.Deployment
{
    runtimeclass PackageVolume;

    [contractversion(1)]
    apicontract PackageDeploymentContract{};

    // How should we handle deployment operations?
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentProcessingModel
    {
        Sequential,
        Parallel
    };

    // Do deployment operations need non-default priority?
    [contract(PackageDeploymentContract, 1)]
    enum DeploymentPriority
    {
        Low,
        Normal,
        Immediate
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolumeStatus
    {
        PackageVolumeStatus();

        Boolean IsOK;
        Boolean IsOffline;
        Boolean IsBroken;
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolume
    {
        PackageVolume();

        Boolean IsSystemVolume;
        String MountPoint;
        String Name;
        String PackageStorePath;
        Boolean SupportsHardLinks;
        Boolean IsFullTrustPackageSupported;
        Boolean IsAppxInstallSupported;

        PackageVolumeStatus Status { get; };

        void FixMe();
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageVolumeManager
    {
        static IVector<PackageVolume> FindPackageVolumes();

        static PackageVolume FindPackageVolumeByPath(String path);

        static PackageVolume FindPackageVolumeByMediaId(String mediaId);

        static PackageVolume FindPackageVolumeByName(String name);
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetItem
    {
        PackageSetItem();

        // Unique id
        String Id;  //required

        // Package criteria to identify if a matching package is ready for use and to use at runtime
        String PackageFamilyName;                           //required
        Windows.ApplicationModel.PackageVersion MinVersion; //required
//TODO        Microsoft.Windows.ApplicationModel.ProcessorArchitectures ProcessorArchitectureFilter;

        // Source where a package can be retrieved from if/when needed for install, remediation, etc
        // and options influencing how we can/must process them when needed
        Windows.Foundation.Uri PackageUri;
        DeploymentProcessingModel DeploymentProcessingModel;
        DeploymentPriority DeploymentPriority;

        // ??? Additional info potentially needed for deployment operations
        //TODO see AddPackageOptions

        // Additional info for runtime use
        //TODO see CreatePackageDependencyOptions
        //TODO see AddPackageDependencyOptions
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSet
    {
        PackageSet();

        // Unique id
        String Id;

        // Package(s) in the set
        IVector<PackageSetItem> PackageSetItems { get; };
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass FindPackageOptions
    {
        FindPackageOptions();

        //TODO
        Boolean TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageSetManager
    {
        static PackageSetManager GetDefault();

        void Add(PackageSet packageSet);  		                // Create/Write/Save
        void Update(PackageSet packageSet);  		            // Update/Write/Save
        void Remove(String packageSetId);		                // Delete
        PackageSet Get(String packageSetId);		            // Read/Load
        IVector<PackageSet> Find(FindPackageOptions options);   // Enumerate
    };

    [contract(PackageDeploymentContract, 1)]
    enum PackageDeploymentStatus
    {
        InProgress = 0,         // The request is in progress
        CompletedSuccess = 1,   // The request completed successfully
        CompletedFailure = 2,   // The request failed with some critical internal error. //TODO:Check ExtendedError for HRESULT
    };

    [contract(PackageDeploymentContract, 1)]
    enum PackageDeploymentProgressStatus
    {
        Queued = 0,             // The request is queued
        InProgress = 1,         // The request is in progress
        CompletedSuccess = 2,   // The request completed successfully
        CompletedFailure = 3,   // The request failed with some critical internal error. //TODO:Check ExtendedError for HRESULT
    };

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentProgress
    {
        PackageDeploymentProgressStatus status;
        UInt32 percentage;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentResult
    {
        PackageDeploymentStatus Status { get; };
        HRESULT ExtendedError { get; };
        Guid ActivityId { get; };
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [contract(PackageDeploymentContract, 1)]
    runtimeclass AddPackageOptions
    {
        AddPackageOptions();

        PackageVolume TargetVolume;
        IVector<Windows.Foundation.Uri> DependencyPackageUris { get; };
        IVector<String> OptionalPackageFamilyNames { get; };
        IVector<Windows.Foundation.Uri> OptionalPackageUris { get; };
        IVector<Windows.Foundation.Uri> RelatedPackageUris { get; };
        Windows.Foundation.Uri ExternalLocationUri;
        Windows.Management.Deployment.StubPackageOption StubPackageOption;
        Boolean AllowUnsigned;
        Boolean DeveloperMode;
        Boolean ForceAppShutdown;
        Boolean ForceTargetAppShutdown;
        Boolean ForceUpdateFromAnyVersion;
        Boolean InstallAllResources;
        Boolean RequiredContentGroupOnly;
        Boolean RetainFilesOnFailure;
        Boolean StageInPlace;
        Boolean DeferRegistrationWhenPackagesAreInUse;

        Boolean IsExpectedDigestsSupported { get; };            // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        IMap<Windows.Foundation.Uri, String> ExpectedDigests{ get; };

        Boolean IsLimitToExistingPackagesSupported { get; };    // Requires Windows >= 10.0.22621.0 (aka Win11 22H2)
        Boolean LimitToExistingPackages;
    }

    // Requires Windows >- 10.0.19041.0 (aka 2004 aka 20H1)
    [contract(PackageDeploymentContract, 1)]
    runtimeclass RemovePackageOptions
    {
        RemovePackageOptions();

        Boolean PreserveApplicationData;
        Boolean PreserveRoamableApplicationData;
        Boolean RemoveForAllUsers;
        DeploymentPriority Priority;
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageDeploymentManager
    {
        // Get an instance of the manager
        static PackageDeploymentManager GetDefault();

        // Return true if the package set's content are present and available for use
        Boolean IsReady(PackageSet packageSet);

        Boolean IsReadyByPackageSetId(String packageSetId);

        // Check if the necessary package(s) needed by the scenario are present
        // and available for use and if not then Make It So.
        // If the necessary packages(s) are not present on the system
        // then make them available (download, install, etc).
        // If the necessary AI Models are present and available this is equivalent to IsReady(id).
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        EnsureIsReadyAsync(PackageSet packageSet);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        EnsureIsReadyByPackageSetIdAsync(String packageSetId);

        // Add packages
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetAsync(PackageSet packageSet, AddPackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        AddPackageSetByIdAsync(String packageSetId, AddPackageOptions options);

        // Remove packages
        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageByFullNameNameAsync(String packageFullName, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageByFamilyNameNameAsync(String packageFamilyName, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options);

        Windows.Foundation.IAsyncOperationWithProgress<PackageDeploymentResult, PackageDeploymentProgress>
        RemovePackageSetByIdAsync(String packageSetId, RemovePackageOptions options);

        // Ditto PackageSet operations of Stage, Register, Repair, Reset
    }

    [contract(PackageDeploymentContract, 1)]
    runtimeclass PackageRuntimeManager
    {
        // Get an instance of the manager
        static PackageRuntimeManager GetDefault();

        // Make the package(s) in the package set available to the calling process
        // i.e. dynamically add the package(s) in the package set to the caller's package graph.
        // This is equivalent to
        //   FOREACH p IN PackageSetManager.Get(id).PackageSetItems
        //       pd = TryCreatePackageDependency(p)
        //       AddPackageDependency(pd)

        void AddPackageSet(PackageSet packageSet);

        [method_name("AddPackageSetWithOptions")]
        void AddPackageSet(PackageSet packageSet,
                           Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions,
                           Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions);

        void AddPackageSetById(String packageSetId);

        [method_name("AddPackageSetByIdWithOptions")]
        void AddPackageSetById(String packageSetId,
                               Microsoft.Windows.ApplicationModel.DynamicDependency.CreatePackageDependencyOptions createOptions,
                               Microsoft.Windows.ApplicationModel.DynamicDependency.AddPackageDependencyOptions addOptions);

    }
}
