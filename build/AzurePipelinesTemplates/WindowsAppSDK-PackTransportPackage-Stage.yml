parameters:
- name: "PublishPackage"
  type: boolean
  default: True
- name: "SignOutput"
  type: boolean
  default: True
- name: "IsOneBranch"
  type: boolean
  default: True
- name: "IsOfficial"
  type: boolean
  default: False
- name: "BuildMockWindowsAppSDK"
  type: boolean
  default: True

stages:
- stage: Pack
  dependsOn: Build
  condition: not(failed())
  jobs:
  - job: NugetPackage
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      ${{ if parameters.IsOneBranch }}:
        type: windows
      ${{ if not( parameters.IsOneBranch ) }}:
        type: windows
        isCustom: true
        name: 'ProjectReunionESPool-2022'
    timeoutInMinutes: 120
    variables:
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_artifactBaseName: "TransportPackage"
    steps:
    - task: PowerShell@2
      name: SetVersion
      displayName: Update metapackage version
      inputs:
        targetType: 'inline'
        script: |
          $packageVersion = '$(version)'
          $pipelineType = '$(PipelineType)'
          $sourceBranchName = '$(Build.SourceBranchName)'
          if ($sourceBranchName -eq 'main' -or $sourceBranchName -eq 'develop')
          {
            $packageVersion = $packageVersion + '.' + $sourceBranchName + '.' + $pipelineType
          }
          Write-Host "##vso[task.setvariable variable=packageVersion;]$packageVersion"
          Write-Host "##vso[task.setvariable variable=packageVersion;isOutput=true;]$packageVersion"

          Write-Host $packageVersion
          [xml]$publicNuspec = Get-Content -Path $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec
          $publicNuspec.package.metadata.version = $packageVersion
          Set-Content -Value $publicNuspec.OuterXml $(Build.SourcesDirectory)\build\NuSpecs\Microsoft.WindowsAppSDK.Foundation.nuspec

    - task: PowerShell@2
      name: PackNuget
      inputs:
        filePath: 'BuildAll.ps1'
        arguments: -Platform "x64" -Configuration "release" -AzureBuildStep "PackNuget" -OutputDirectory "$(build.artifactStagingDirectory)\FullNuget" -PackageVersion "$(packageVersion)"

    # Disable building MockWindowsAppSDK until we can consider the public vs private scenario
    # - ${{ if eq(parameters.BuildMockWindowsAppSDK, 'true') }}:
    #   - task: PowerShell@2
    #     name: BuildMock
    #     inputs:
    #       filePath: 'BuildAll.ps1'
    #       arguments: -Platform "x64" -Configuration "release" -AzureBuildStep "BuildMock" -OutputDirectory "$(build.artifactStagingDirectory)\FullNuget" -PackageVersion "$(packageVersion)"

    - ${{ if eq(parameters.SignOutput, 'true') }}:
      - task: EsrpCodeSigning@2
        inputs:
          ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
          FolderPath: $(build.artifactStagingDirectory)\FullNuget
          Pattern: 'Microsoft.WindowsAppSDK.Foundation*.nupkg'
          UseMinimatch: true
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
              {
                "KeyCode" : "CP-401405",
                "OperationCode" : "NuGetSign",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-401405",
                  "OperationCode" : "NuGetVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'

    - task: CopyFiles@2
      displayName: MoveToOutputDirectory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\BuildOutput\FullNuget'
        TargetFolder: '$(ob_outputDirectory)\NugetContent'

    - task: CopyFiles@2
      displayName: MoveToOutputDirectory
      inputs:
        SourceFolder: '$(build.artifactStagingDirectory)\FullNuget'
        TargetFolder: '$(ob_outputDirectory)'

    - ${{ if not( parameters.IsOneBranch ) }}:
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(ob_outputDirectory)'
          artifactName: '$(ob_artifactBaseName)'

    - ${{ if eq(parameters.PublishPackage, 'true') }}:
      # this mysterious guid fixes the "NuGetCommand@2 is ambiguous" error :-(
      - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
        displayName: 'NuGet push to ProjectReunion.nuget.internal'
        inputs:
          command: 'push'
          packagesToPush: '$(ob_outputDirectory)\*.nupkg'
          verbosityPush: 'Detailed'
          nuGetFeedType: 'internal'
          #Note: The project qualifier is always required when using a feed name. Also, do not use organization scoped feeds.
          publishVstsFeed: 'ProjectReunion/Project.Reunion.nuget.internal'
