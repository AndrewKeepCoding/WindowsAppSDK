parameters:
- name: "SignOutput"
  type: boolean
  default: False
- name: "IsOneBranch"
  type: boolean
  default: True
# alam start
- name: runStaticAnalysis
  type: boolean
  default: True
# alam end

steps:
- task: NuGetToolInstaller@1

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'TelemetryInternal'

- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of packages'
  inputs:
    command: 'custom'
    arguments: 'restore dev\WindowsAppRuntime_Insights\packages.config -ConfigFile NuGet.config -PackagesDirectory dev\WindowsAppRuntime_Insights\packages'

- template: WindowsAppSDK-SetupBuildEnvironment-Steps.yml
  parameters:
    IsOneBranch: ${{ parameters.IsOneBranch }}

- task: PowerShell@2
  name: BuildBinaries
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -AzureBuildStep "BuildAnyCPU"

# alam start
- ${{ if eq(parameters.runStaticAnalysis, 'True') }}:
  - task: SDLNativeRules@3
    #condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'), eq(variables['buildPlatform'], 'x64'))
    displayName: Run the PREfast SDL Native Rules 
    inputs:
      setupCommandlines: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsMSBuildCmd.bat"'
      # msBuildArchitecture: amd64
      # msBuildCommandline: 'msbuild.exe /nologo /nr:false $(Build.SourcesDirectory)\dev\Bootstrap\CS\Microsoft.WindowsAppRuntime.Bootstrap.Net\Microsoft.WindowsAppRuntime.Bootstrap.Net.csproj'
      msBuildCommandline: 'msbuild.exe /restore /nologo /nr:false $(Build.SourcesDirectory)\dev\Bootstrap\CS\Microsoft.WindowsAppRuntime.Bootstrap.Net\Microsoft.WindowsAppRuntime.Bootstrap.Net.csproj'
    continueOnError: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  # PREFast scan is enabled in this pipeline run, so we pass PreFastSetup to BuildAll.ps1 to get it to do the commonn setup steps, but short of
  # building the target via MSBuild.exe
  - task: PowerShell@2
    name: PreFastSetup
    inputs:
      filePath: 'BuildAll.ps1'
      arguments: -Platform "$(buildPlatform)" -Configuration "$(buildConfiguration)" -AzureBuildStep "PreFastSetup"
    enabled: false

  # The PREFast task below only supports the VSBuild/MSbuild task, _not_ a direct call to MSBuild.exe.
  - task: MSBuild@1
    displayName: 'build MrtCore with MSBuild'
    inputs:
      platform: '$(buildPlatform)'
      solution: '$(Build.SourcesDirectory)\dev\MRTCore\mrt\MrtCore.sln'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/restore /binaryLogger:$(Build.SourcesDirectory)\dev\MRTCore\mrt\mrtcore.$(buildPlatform).$(buildConfiguration).binlog'
    enabled: false

  # ToDo: WindowsAppSDK-BinaryAnalysis-steps.yml below ultimately invokes SDLNativeRules@2, which is out of support.
  # So for the time being, we explicitly call SDLNativeRules@3, which is currently supported. Consider eliminating this
  # extra step when we run PREFast as part of WindowsAppSDK-BinaryAnalysis-steps.yml below.
  - task: SDLNativeRules@3
    displayName: 'Guardian: PreFast@3'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    continueOnError: true
    inputs:
      userProvideBuildInfo: 'auto'
      toolVersion: Latest
    enabled: false

#- ${{ else }}:
#  - task: PowerShell@2
#    name: BuildBinaries
#    inputs:
#      filePath: 'BuildAll.ps1'
#      arguments: -AzureBuildStep "BuildAnyCPU"
# alam end

# component detection must happen *within* the build task
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'Medium'
    failOnAlert: true

- ${{ if eq(parameters.SignOutput, 'true') }}:
  - task: EsrpCodeSigning@2
    inputs:
      ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
      FolderPath: '$(build.SourcesDirectory)\BuildOutput'
      Pattern: |
        **/*.winmd
        **/*.dll
        **/*.exe
      UseMinimatch: true
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'

# Artifacts are uploaded via ob_outputDirectory where the each vPack Push jobs downloads from
# so the CopyFiles below are to move all the vPack files to the right locations
- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
    TargetFolder: '$(ob_outputDirectory)'

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(ob_outputDirectory)'
      artifactName: '$(ob_artifactBaseName)'